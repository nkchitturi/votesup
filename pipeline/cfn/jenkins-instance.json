{
  "AWSTemplateFormatVersion":"2010-09-09",
  "Description":"Stelligent CloudFormation Template for launching Jenkins on an EC2 instance ** This template creates one or more Amazon resources. You will be billed for the AWS resources used if you create a stack from this template.",
  "Parameters":{
    "Ec2Key":{
      "Type":"String",
      "Description":"Ec2 key for ssh access",
      "Default":""
    },
    "SubnetId":{
      "Type":"String",
      "Description":"VPC subnet id in which to place jenkins"
    },
    "VPC":{
      "Type":"String",
      "Description":"VPC ID in which to place Jenkins"
    },
    "CfnInitRole":{
      "Type":"String",
      "Description":"IAM Role for cfn-init"
    },
    "InstanceProfile":{
      "Type":"String",
      "Description":"Instance profile for jenkins instance"
    },
    "S3Bucket":{
      "Type":"String",
      "Description":"Artifact Bucket"
    },
    "JobConfigsTarball":{
      "Type":"String",
      "Description":"Path to config tarball in S3Bucket"
    },
    "SshCidr":{
      "Type":"String",
      "Description":"Whitelisted network CIDR for inbound SSH",
      "Default":"0.0.0.0/0"
    }
  },
  "Conditions":{
    "NoEc2Key":{
      "Fn::Equals":[
        {
          "Ref":"Ec2Key"
        },
        ""
      ]
    }
  },
  "Mappings":{
    "RegionConfig":{
      "us-east-1":{
        "ami":"ami-dcc2b3b6"
      }
    }
  },
  "Resources":{
    "JenkinsSecurityGroup":{
      "Type":"AWS::EC2::SecurityGroup",
      "Properties":{
        "VpcId":{
          "Ref":"VPC"
        },
        "GroupDescription":"Open ALL the ports",
        "SecurityGroupIngress":[
          {
            "IpProtocol":"tcp",
            "FromPort":"1",
            "ToPort":"65535",
            "CidrIp":{
              "Ref":"SshCidr"
            }
          }
        ]
      }
    },
    "JenkinsInstance":{
      "Type":"AWS::EC2::Instance",
      "Metadata":{
        "AWS::CloudFormation::Authentication":{
          "S3AccessCreds":{
            "type":"S3",
            "roleName":{
              "Ref":"CfnInitRole"
            },
            "buckets":[
              {
                "Ref":"S3Bucket"
              }
            ]
          }
        },
        "AWS::CloudFormation::Init":{
          "config":{
            "files":{
              "/tmp/job-configs.tgz":{
                "source":{
                  "Fn::Join":[
                    "",
                    [
                      "https://s3.amazonaws.com/",
                      {
                        "Ref":"S3Bucket"
                      },
                      "/",
                      {
                        "Ref":"JobConfigsTarball"
                      }
                    ]
                  ]
                },
                "authentication":"S3AccessCreds",
                "mode":"000644",
                "owner":"root",
                "group":"root"
              },
              "/tmp/node-install.tar.gz":{
                "source":"https://nodejs.org/dist/v0.12.7/node-v0.12.7-linux-x64.tar.gz",
                "mode":"000644",
                "owner":"root",
                "group":"root"
              }
            },
            "commands":{
              "00-extract-configs":{
                "command":{
                  "Fn::Join":[
                    "",
                    [
                      "cd /var/lib/jenkins/jobs/\n",
                      "tar xzf /tmp/job-configs.tgz\n",
                      "chown -R jenkins:jenkins .\n"
                    ]
                  ]
                }
              },
              "10-install-node":{
                "test":"test \"$(/usr/local/bin/node --version 2>/dev/null)\" != 'v0.12.7'",
                "command":{
                  "Fn::Join":[
                    "",
                    [
                      "yum remove -y nodejs npm\n",
                      "\n",
                      "cd /usr/local && tar --strip-components 1 -xzf /tmp/node-install.tar.gz\n",
                      "if [ ! -e /usr/bin/node ]; then\n",
                      "  ln -s /usr/local/bin/node /usr/bin/node\n",
                      "fi\n",
                      "if [ ! -e /usr/bin/npm ]; then\n",
                      "  ln -s /usr/local/bin/npm /usr/bin/npm\n",
                      "fi\n"
                    ]
                  ]
                }
              },
              "15-install-node-modules":{
                "command":"npm install -g gulp"
              }
            }
          }
        }
      },
      "Properties":{
        "ImageId":{
          "Fn::FindInMap":[
            "RegionConfig",
            {
              "Ref":"AWS::Region"
            },
            "ami"
          ]
        },
        "InstanceType":"m4.large",
        "IamInstanceProfile":{
          "Ref":"InstanceProfile"
        },
        "KeyName":{
          "Fn::If":[
            "NoEc2Key",
            {
              "Ref":"AWS::NoValue"
            },
            {
              "Ref":"Ec2Key"
            }
          ]
        },
        "Tags":[
          {
            "Key":"Application",
            "Value":{
              "Ref":"AWS::StackId"
            }
          },
          {
            "Key":"Name",
            "Value":{
              "Ref":"AWS::StackName"
            }
          }
        ],
        "NetworkInterfaces":[
          {
            "GroupSet":[
              {
                "Ref":"JenkinsSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress":"true",
            "DeviceIndex":"0",
            "DeleteOnTermination":"true",
            "SubnetId":{
              "Ref":"SubnetId"
            }
          }
        ],
        "UserData":{
          "Fn::Base64":{
            "Fn::Join":[
              "",
              [
                "#!/bin/bash -xe\n",
                "yum update -y aws-cfn-bootstrap\n",
                "yum -y upgrade\n",
                "\n",
                "service jenkins stop\n",
                "/opt/aws/bin/cfn-init -v",
                " --stack ",
                {
                  "Ref":"AWS::StackName"
                },
                " --resource JenkinsInstance ",
                " --role ",
                {
                  "Ref":"CfnInitRole"
                },
                " --region ",
                {
                  "Ref":"AWS::Region"
                },
                "\n",
                "\n",
                "service jenkins start\n",
                "node -v \n",
                "npm -v\n",
                "\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                " --stack ",
                {
                  "Ref":"AWS::StackName"
                },
                " --resource JenkinsInstance ",
                " --region ",
                {
                  "Ref":"AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      },
      "CreationPolicy":{
        "ResourceSignal":{
          "Timeout":"PT25M"
        }
      }
    }
  },
  "Outputs":{
    "StackName":{
      "Value":{
        "Ref":"AWS::StackName"
      }
    },
    "PublicDns":{
      "Description":"Public DNS of Jenkins instance",
      "Value":{
        "Fn::GetAtt":[
          "JenkinsInstance",
          "PublicIp"
        ]
      }
    },
    "JenkinsURL":{
      "Description":"Jenkins URL",
      "Value":{
        "Fn::Join":[
          "",
          [
            "http://",
            {
              "Fn::GetAtt":[
                "JenkinsInstance",
                "PublicIp"
              ]
            },
            ":8080/"
          ]
        ]
      }
    },
    "SecurityGroup":{
      "Description":"Jenkins Security Group",
      "Value":{
        "Fn::GetAtt":[
          "JenkinsSecurityGroup",
          "GroupId"
        ]
      }
    }
  }
}